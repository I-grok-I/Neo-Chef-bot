const {Telegraf, Markup, Composer, Scenes} = require('telegraf');
const { helloText } = require('./constants');
require('dotenv').config();
const bot = new Telegraf('5856492718:AAFYH9lDst1Jy1Itou4EINFXUwYTpUoBDUo');
const productList = require('./productList')
const products = productList.productList

//–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é ctx.session.data, —Å–ø—Ä–∞—à–∏–≤–∞—é –æ —Å–ø–æ—Å–æ–±–µ –¥–æ—Å—Ç–∞–≤–∫–∏. —Ç—É—Ç –≤—Ä–æ–¥–µ –æ–∫
const startWizard = new Composer()
startWizard.on('callback_query', async (ctx) => {
    try {
        let sum = ctx.session.cart.reduce((acc, curr)=> {return acc+=curr.price*curr.count}, 0)
        ctx.session.data = {}
        await ctx.deleteMessage()
        await ctx.replyWithHTML(`${ sum>500? '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏': `
<b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏</b>
<i>–í–Ω–∏–º–∞–Ω–∏–µ! –î–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–∞–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä–æ–≤ –µ—â–µ –Ω–∞ ${500-sum}‚ÇΩ</i>`}`, Markup.keyboard([
            ['üöó–î–æ—Å—Ç–∞–≤–∫–∞', 'üôã‚Äç‚ôÇÔ∏è–°–∞–º–æ–≤—ã–≤–æ–∑'],
            ['–í—ã–π—Ç–∏ –≤ –º–µ–Ω—é']
        ]).resize())
         return ctx.wizard.next()
    } catch (error) {
        console.log(error.message);
    }
})

//—à–∞–≥ –¥–æ—Å—Ç–∞–≤–∫–∏. –¢—É—Ç —Å–æ—Ö—Ä–∞–Ω—è—é –≤ orderType –ø—Ä–æ—à–ª–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏) –∏ —Å–ø—Ä–∞—à–∏–≤–∞—é –∏–º—è.
const orderType = new Composer()
orderType.on('text', async (ctx) => {
    try {
        if (ctx.message.text === 'üöó–î–æ—Å—Ç–∞–≤–∫–∞' || ctx.message.text === 'üôã‚Äç‚ôÇÔ∏è–°–∞–º–æ–≤—ã–≤–æ–∑') {
            ctx.session.data.orderType = ctx.message.text
        await ctx.reply('–ù–∞–ø–∏—à–∏—Ç–µ –∏–º—è', Markup.keyboard([
            ['–í—ã–π—Ç–∏ –≤ –º–µ–Ω—é']
        ]).resize())
        return ctx.wizard.next()
        } else if (ctx.message.text == '–í—ã–π—Ç–∏ –≤ –º–µ–Ω—é') {
            await ctx.replyWithHTML(helloText, 
                    Markup.keyboard(
                        [
                            ['üìù–ú–ï–ù–Æ'],['üõí–ö–û–†–ó–ò–ù–ê']
                        ]
                    ).resize())
            return ctx.scene.leave()
        } else {
            await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏', Markup.keyboard([
                ['üöó–î–æ—Å—Ç–∞–≤–∫–∞', 'üôã‚Äç‚ôÇÔ∏è–°–∞–º–æ–≤—ã–≤–æ–∑']
            ]).resize())
            
        }
    } catch (error) {
        console.log(error.message);
    }
})


//–ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω—å—à–µ 3 —Å–∏–º–≤–æ–ª–æ–≤ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Å—Ç–æ–∏—Ç –Ω–µ –∏–∑ –±—É–∫–≤ - –æ—Ç–ø—Ä–∞–≤–ª—è—é —Å–±—â "–≤–≤–µ–¥–∏—Ç–µ –∏–º—è!", 
//–µ—Å–ª–∏ –≤—Å—ë –Ω–æ—Ä–º, —Å–æ—Ö—Ä–∞–Ω—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ session.data.name –∏ –ø–µ—Ä–µ—Ö–æ–∂—É –¥–∞–ª—å—à–µ
const firstName = new Composer()
firstName.on('text', async (ctx) => {
    try { 
        if (ctx.message.text.length<3 || ctx.message.text.match(/\P{L}/giu)) {
            ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∏–º—è!')
        } else if (ctx.message.text == '–í—ã–π—Ç–∏ –≤ –º–µ–Ω—é') {
            await ctx.replyWithHTML(helloText, Markup.keyboard([ ['üìù–ú–ï–ù–Æ'],['üõí–ö–û–†–ó–ò–ù–ê'] ]).resize())
            return ctx.scene.leave()
        } else {
            ctx.session.data.name = ctx.message.text
            ctx.session.data.user = ctx.message.from.id
            await ctx.reply("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –¥–ª—è —Å–≤—è–∑–∏", Markup.keyboard([ 
                [{
                    text: "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–¥–Ω–∏–º –∫–∞—Å–∞–Ω–∏–µ–º üìû",
                    request_contact: true
                }], ['–í—ã–π—Ç–∏ –≤ –º–µ–Ω—é'] 
            ]).resize());
            return ctx.wizard.next()
        }
    } catch (error) {
        console.log(error.message);
    }
})

//–µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ–µ —Å–±—â - —ç—Ç–æ —Ç–µ–∫—Å—Ç, —è –≤–∞–ª–∏–¥–∏—Ä—É—é –Ω–æ–º–µ—Ä. –µ—Å–ª–∏ –Ω–µ —Ç–µ–∫—Å—Ç - –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –Ω–æ–º–µ—Ä. —Å–æ—Ö—Ä–∞–Ω—è—é –Ω–æ–º–µ—Ä –≤ session.data.number
//–ø–æ—Ç–æ–º –æ—Ç–ø—Ä–∞–≤–ª—è—é
const number = new Composer()
number.on('message', async (ctx) => {
    try {
        if (ctx.message.text) {
            if (ctx.message.text == '–í—ã–π—Ç–∏ –≤ –º–µ–Ω—é') {
                await ctx.replyWithHTML(helloText, 
                        Markup.keyboard(
                            [
                                ['üìù–ú–ï–ù–Æ'],['üõí–ö–û–†–ó–ò–ù–ê']
                            ]
                        ).resize())
                return ctx.scene.leave()
            } else if (ctx.message.text.length !== 11 || ctx.message.text.match(/\D/gi)) {
                ctx.reply('–í–≤–µ–¥–∏—Ç–µ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 89123456677')
            } else {
                ctx.session.data.number = ctx.message.text
                if (ctx.session.data.orderType == 'üôã‚Äç‚ôÇÔ∏è–°–∞–º–æ–≤—ã–≤–æ–∑') {
                    await ctx.wizard.selectStep(6)
                }
                await ctx.replyWithHTML('–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏? \n–ù–∞–ø–∏—à–∏—Ç–µ —É–ª–∏—Ü—É –∏ –Ω–æ–º–µ—Ä –¥–æ–º–∞')
                return ctx.wizard.next()
            }
        } else {
            ctx.session.data.number = ctx.message.contact.phone_number
            let k = 0;
            for(let i = 0; i < 3; i++ ){
            k =  ctx.message.message_id-i;
            ctx.deleteMessage(k)
        }
            await ctx.replyWithHTML('–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏? \n–ù–∞–ø–∏—à–∏—Ç–µ —É–ª–∏—Ü—É –∏ –Ω–æ–º–µ—Ä –¥–æ–º–∞', Markup.keyboard([
                ['–í—ã–π—Ç–∏ –≤ –º–µ–Ω—é']
            ]).resize())
            return ctx.wizard.next()
        }
    } catch (error) {
        console.log(error.message);
    }
})
//—Ç—É—Ç —Å–ø—Ä–∞—à–∏–≤–∞—é –∞–¥—Ä–µ—Å. –ü–æ—Ç–æ–º —Å–ø—Ä–∞—à–∏–≤–∞—é —Ö–æ—á–µ—Ç –ª–∏ —é–∑–µ—Ä –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ–ø—Ä–∞–≤–∫–∏ –≥–µ–æ –∏ —Å –∫–Ω–æ–ø–∫–æ–π "–Ω–µ—Ç"
const address = new Composer()
address.on('message', async (ctx) => { 
    try {
        if (ctx.message.text == '–í—ã–π—Ç–∏ –≤ –º–µ–Ω—é') {
            await ctx.replyWithHTML(helloText, 
            Markup.keyboard(
                [
                    ['üìù–ú–ï–ù–Æ'],['üõí–ö–û–†–ó–ò–ù–ê']
                ]
            ).resize())
    return ctx.scene.leave()
        } else if (!ctx.message.text.match(/\d/gu)) {
            ctx.replyWithHTML('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –∞–¥—Ä–µ—Å <b>—Å –Ω–æ–º–µ—Ä–æ–º –¥–æ–º–∞</b>')
        } else { //–æ—Ç–º–µ–Ω—ë–Ω
        ctx.session.data.address = ctx.message.text
        await ctx.reply('–û—Å—Ç–∞–≤–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é?', Markup.keyboard([
            [
                {
                    text: 'üìç–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–¥–Ω–∏–º –∫–∞—Å–∞–Ω–∏–µ–º',
                    request_location: true
                }
            ], ['–ù–µ—Ç', '–í—ã–π—Ç–∏ –≤ –º–µ–Ω—é']
        ]).resize()
        )
        ctx.wizard.next()
        }
    } catch (error) {
        console.log(error.message);
    }
})

const requestGeo = new Composer()
requestGeo.on('message', async (ctx) => {
    try {
        if (ctx.message.text == '–í—ã–π—Ç–∏ –≤ –º–µ–Ω—é') {
            await ctx.replyWithHTML(helloText, 
            Markup.keyboard(
                [
                    ['üìù–ú–ï–ù–Æ'],['üõí–ö–û–†–ó–ò–ù–ê']
                ]
            ).resize())
    return ctx.scene.leave()
        } else {
            ctx.session.data.geo = ctx.message.location || ctx.message.text
        await ctx.reply('–û—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π?', Markup.keyboard(
            ['–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è']
            ).resize())
        return ctx.wizard.next()
        }
    } catch (error) {
        console.log(error.message);
    }
    
})


const paymentChoice = new Composer()
paymentChoice.on('message', async (ctx) => {
    try {
        ctx.session.cart = [...new Set(ctx.session.cart)]
        ctx.session.data.comment = ctx.message.text
        let cart = ctx.session.cart
        let k = 0;
        for(let i = 0; i < 3; i++ ){
            k =  ctx.message.message_id-i;
            ctx.deleteMessage(k)
        }
        let sum = cart.reduce((acc, curr)=> {return acc+=curr.price*curr.count}, 0)
                let discount = 0
                const date = new Date();
                if ((date.getHours()+3) >= 20) {
                    sum*= 0.85
                    discount = 15
                } else if (sum >=500 && sum <1000) {
                    sum = sum/100*97
                    discount = 3
                } else if (sum >=1000) {
                    sum = sum/100*95
                    discount = 5
                }
    
        await ctx.replyWithHTML(`
üõç<b>–í–∞—à –∑–∞–∫–∞–∑:</b>
„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è ${ctx.session.cart.filter(item => item.count>0).map(item => '\n'+ "‚óΩ" + item.title +' - ['+item.count+'*'+item.price+'|'+item.count*item.price+']')} 
„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è
<b>üí≥ –û–±—â–∞—è —Å—É–º–º–∞: ‚ÇΩ ${ctx.session.cart.reduce((acc, curr)=> {return acc+=curr.price*curr.count}, 0)}</b> 
–°–∫–∏–¥–∫–∞: <b>${discount}%</b>
    
<b><ins>–ò–¢–û–ì:</ins> ‚ÇΩ ${Math.round(sum)}</b>
„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è
üë§–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:
‚îî–ò–º—è: ${ctx.session.data.name}
‚îî–ù–æ–º–µ—Ä: ${ctx.session.data.number}
‚îî–ê–¥—Ä–µ—Å: ${ctx.session.data.address.longitude?'–≥–µ–æ–ø–æ–∑–∏—Ü–∏—è':ctx.session.data.address}
–°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏: ${ctx.session.data.orderType}
–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${ctx.session.data.comment}
„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è
–í–∞–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—á–∏—Å–ª–µ–Ω—ã –±–æ–Ω—É—Å—ã –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –ø–æ–∫—É–ø–∫—É - ‚ÇΩ${(Math.round(sum*0.03))}üî∏
`, Markup.inlineKeyboard(
        [
            [Markup.button.callback('‚úÖ–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑', 'finallyConfirm')],
            [Markup.button.callback('‚ùå–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑', 'finallyReject')]
        ]
    ))
    return ctx.wizard.next()
    } catch (error) {
        console.log(error.message);
    }
})

const sendMsgToChanel = new Composer()
sendMsgToChanel.on('callback_query', async (ctx) => {
        try {
            ctx.session.data.userId = ctx.callbackQuery.from.id
            // console.log(ctx.callbackQuery)
            let sum = ctx.session.cart.reduce((acc, curr)=> {return acc+=curr.price*curr.count}, 0)
                let discount = 0
                const date = new Date();
                if ((date.getHours()+3) >= 20) {
                    sum*= 0.85
                    discount = 15
                } else if (sum >=500 && sum <1000) {
                    sum = sum/100*97
                    discount = 3
                } else if (sum >=1000) {
                    sum = sum/100*95
                    discount = 5
                }
        
            const data = ctx.update.callback_query.data;
            if (data == 'finallyConfirm') {
                await ctx.answerCbQuery()
                await ctx.editMessageReplyMarkup({
                    inline_keyboard:
                    [
                        [{text:"–ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω", callback_data:"orderSent"}]
                    ]
                })
                await bot.telegram.sendMessage(-1001846120532, 
`üõç–ù–æ–≤—ã–π –∑–∞–∫–∞–∑:
„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è ${ctx.session.cart.filter(item => item.count>0).map(item => '\n'+ "‚óΩ" + item.title +' - ['+item.count+'*'+item.price+'|'+item.count*item.price+']')} 
„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è
üí≥ –û–±—â–∞—è —Å—É–º–º–∞: ‚ÇΩ ${ctx.session.cart.reduce((acc, curr)=> {return acc+=curr.price*curr.count}, 0)} 
–°–∫–∏–¥–∫–∞: ${discount}%
        
<ins><b>–ò–¢–û–ì:</b></ins> ‚ÇΩ ${Math.round(sum)}
–ù–∞—á–∏—Å–ª–µ–Ω–æ –±–æ–Ω—É—Å–æ–≤: ‚ÇΩ ${Math.round(sum*0.03)}üî∏
„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è
üë§–î–∞–Ω–Ω—ã–µ:
‚îî–ò–º—è: ${ctx.session.data.name}
‚îî–ù–æ–º–µ—Ä: <pre>${ctx.session.data.number}</pre>
‚îî–ê–¥—Ä–µ—Å: ${ctx.session.data.address}
‚îî<a href="tg://user?id=${ctx.session.data.user}">–ù–∞–ø–∏—Å–∞—Ç—å –∑–∞–∫–∞–∑—á–∏–∫—É</a>
–°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏: ${ctx.session.data.orderType}
–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${ctx.session.data.comment}
„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è
`, {
            reply_markup:{
                inline_keyboard:[
                    [{text:"‚úÖ–û–ø–ª–∞—á–µ–Ω", callback_data:"accepted"}],
                    [{text:"‚ùå–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data:`rejected`}]
                ]
            }, parse_mode: 'HTML'
        })
        await bot.telegram.sendLocation(-1001846120532, ctx.session.data.geo.latitude, ctx.session.data.geo.longitude)   
        ctx.session.cart = []
        products.forEach(product => product.count = 0)
        
        } if (data == 'finallyReject') {
            
            await ctx.answerCbQuery('–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω')
            ctx.session.cart = []
            products.forEach(item => item.count = null)
            await ctx.editMessageReplyMarkup({inline_keyboard:
                [
                    [Markup.button.callback('–û—Ç–º–µ–Ω—ë–Ω', 'cancelled')],
                ]
            })
            await ctx.replyWithHTML('–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω', Markup.keyboard(
                [
                    ['üìù–ú–ï–ù–Æ'],['üõí–ö–û–†–ó–ò–ù–ê']
                ]
            ).resize())
                    await ctx.scene.leave()
            
        } 
            return ctx.scene.leave()
    } catch (error) {
        console.log(error.message);
    }
})


const orderScene = new Scenes.WizardScene('orderScene', startWizard, orderType, firstName, number, address, requestGeo, paymentChoice, sendMsgToChanel )


module.exports = orderScene