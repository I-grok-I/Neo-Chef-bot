const { Telegraf, Markup, Composer, Scenes, session} = require('telegraf');
require('dotenv').config();
const bot = new Telegraf(process.env.BOT_TOKEN);
const productList = require('./productList')
const products = productList.productList
const btns = require('./constants');
const garnishMealsIds = products.filter(item => item.garnish).map(item => item.id)





//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
const orderScene = require('./orderScene');

const stage = new Scenes.Stage([orderScene])
bot.use(session());
bot.use(stage.middleware());
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

        
bot.on("photo", async (ctx) => {
    
    const captionPhoto = ctx.message.caption;
    const captionEntitiesPhoto = ctx.message.caption_entities;
    const chat_id = 859134174
    const fileIdPhoto = ctx.message.photo[ctx.message.photo.length-1].file_id;

    return ctx.replyWithHTML(`${fileIdPhoto}`);
});

bot.action(garnishMealsIds, async (ctx) => {
   await ctx.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ –≥–∞—Ä–Ω–∏—Ä')
   await ctx.editMessageReplyMarkup({inline_keyboard: [ 
        [Markup.button.callback('–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å —Ñ—Ä–∏', `${ctx.match}Free`)],
        [Markup.button.callback('–†–∏—Å', `${ctx.match}Rise`)],
        [Markup.button.callback('–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å –≤ –º—É–Ω–¥–∏—Ä–µ', `${ctx.match}Mundir`)],
        [Markup.button.callback('–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å–Ω–æ–µ –ø—é—Ä–µ', `${ctx.match}Pure`)],
        [Markup.button.callback('–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å –ø–æ-–¥–µ—Ä–µ–≤–µ–Ω—Å–∫–∏', `${ctx.match}Village`)],
        [Markup.button.callback('–ù–∞–∑–∞–¥', 'cknMeal')],

    ]})
})


//–•—ç–Ω–¥–ª–µ—Ä—ã –¥–ª—è –∫–∞–Ω–∞–ª–∞. –¢–æ, —á—Ç–æ –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ "–û–ø–ª–∞—á–µ–Ω" –∏–ª–∏ "–û—Ç–∫–ª–æ–Ω—ë–Ω"
bot.action('accepted', async (ctx) => {
    await ctx.editMessageReplyMarkup({inline_keyboard:[
        [Markup.button.callback('‚úÖ–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç', 'orderAccepted')],
    ] })
})
bot.action('rejected', async (ctx) => {
    await ctx.editMessageReplyMarkup({inline_keyboard:[
        [Markup.button.callback('‚ùå–ó–∞–∫–∞–∑ –û—Ç–∫–ª–æ–Ω–µ–Ω', 'orderRejected')],
      ] })
}) 

bot.action('drinks', async (ctx) => {
    await ctx.answerCbQuery()
    await ctx.deleteMessage();
    
    await ctx.replyWithHTML('<b>_______–ù–ê–ü–ò–¢–ö–ò:_______</b>',Markup.inlineKeyboard(btns.drinks))
}) 


//–ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
bot.action(products.map(product => product.categoryId), async (ctx) => {
    await ctx.answerCbQuery()
    await ctx.deleteMessage();
    let tappedCategoryProducts = products.filter(product =>product.categoryId == ctx.match).map(item => [item.title +` [${item.price[0]}]`, item.id])
    tappedCategoryProducts.push(['üîô–Ω–∞–∑–∞–¥', 'menu'])
    ctx.sendMessage(`${products.find(item => ctx.match == item.categoryId).category}`, Markup.inlineKeyboard(tappedCategoryProducts.map(item=> [Markup.button.callback(item[0], item[1])])))
    
})







//MENU_________________________
bot.start((ctx) => {
    ctx.sendMessage("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ù–µ–æ –®–µ—Ñ.", Markup.keyboard(
        [
            ['–ú–µ–Ω—é'],['–ö–æ—Ä–∑–∏–Ω–∞']
        ]
    ).resize())
    // ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ', Markup.inlineKeyboard(btns.categoryBtns))
})
bot.hears('–ú–µ–Ω—é', async (ctx) => {
    for(let i = 0; i < 3; i++ ){
        k =  ctx.message.message_id-i;
        await ctx.deleteMessage(k)
    }
    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ', Markup.inlineKeyboard(btns.categoryBtns))
})
bot.hears('–ö–æ—Ä–∑–∏–Ω–∞', async ctx => {
    ctx.session ??= { cart: [] };
    ctx.session.cart ??= [];
    var cart = ctx.session.cart
    if(cart.length === 0 || cart.reduce((acc, curr)=> {return acc+=curr.price[0]*curr.count}, 0)==0) {
        await ctx.replyWithHTML('<b>–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞...</b>', Markup.inlineKeyboard( 
            [
                [Markup.button.callback(`üìù–ú–µ–Ω—é`, 'menu')],
            ]))
    } else {
        let sum = cart.reduce((acc, curr)=> {return acc+=curr.price[0]*curr.count}, 0)
        if (sum >=500 && sum <1000) {sum = sum/100*97}
        else if (sum >=1000) {sum = sum/100*95}
        let discount = 0
        if (sum >=500 && sum <1000) {discount = 3}
        else if (sum >=1000) {discount = 5}
        await ctx.replyWithHTML(`üõç<b>–í–∞—à –∑–∞–∫–∞–∑:</b> \n „Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è ${cart.filter(item => item.count>=1).map(item => '\n'+ "‚óΩ" + item.title +' - ['+item.count+'*'+item.price[0]+'|'+item.count*item.price[0]+']')} \n „Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è\n <b>üí≥ –û–±—â–∞—è —Å—É–º–º–∞: ‚ÇΩ${ctx.session.cart.reduce((acc, curr)=> {return acc+=curr.price[0]*curr.count}, 0)}</b>\n–°–∫–∏–¥–∫–∞: <b>${discount}%</b>\n<b><ins>–ò—Ç–æ–≥:</ins> ‚ÇΩ${Math.round(sum)}</b>`, Markup.inlineKeyboard([
        [Markup.button.callback(`‚úÖ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ`, 'submitOrder')],
        [Markup.button.callback(`‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑`, 'cancelOrder')],
        [Markup.button.callback(`üîô–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏`, 'menu')]
    ]))  }
})
bot.action('menu', ctx => {
    ctx.answerCbQuery()
    ctx.deleteMessage()
    ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç', Markup.inlineKeyboard(btns.categoryBtns))
})
//_____________________MENU END


//________________________________CALLBACK QUERY________________________
bot.on('callback_query', async (ctx) => {
    ctx.session ??= { cart: [] };
    ctx.session.cart ??= [];
    var cart = ctx.session.cart
    // console.log(ctx.session.cart)
    const data = ctx.update.callback_query.data
    // console.log(data)
    const tappedProduct = products.find(item => item.id == data)
    
    if(tappedProduct) {
        await ctx.answerCbQuery()
        ctx.session.cart.push(tappedProduct)                   
        // console.log(ctx.session.cart)
        await ctx.deleteMessage()

        await ctx.telegram.sendPhoto(ctx.chat.id, tappedProduct.photo_id || 'AgACAgIAAxkBAAIRVGPD-BlnteHFVOo43qK-Ps1fpyoRAAIPwjEboqAhSiqb19LkE4i3AQADAgADeQADLQQ', {
            caption: `<b>${tappedProduct.title} - [‚ÇΩ ${tappedProduct.price[0]}]</b> \n„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è\n–°–æ—Å—Ç–∞–≤:\n${tappedProduct.content || ''}`,
            reply_markup:{
                inline_keyboard:[
                    [{text:"–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data:"+"}],
                    [{text:"–ù–∞–∑–∞–¥", callback_data:`${tappedProduct.categoryId}`}]
                ]
            }, parse_mode: 'HTML'
        });

    }
    if (data === '+') {
        cart.at(-1).count+=1
        await ctx.editMessageReplyMarkup({inline_keyboard:[
            [Markup.button.callback('‚ûñ', '-'), Markup.button.callback(`${cart.at(-1).count}`, 'count'), Markup.button.callback('‚ûï', '+')],
            [Markup.button.callback(`üõí (${ctx.session.cart.reduce((acc, curr)=> {return acc+=curr.price[0]*curr.count}, 0)})`, 'cart')],
            [Markup.button.callback('–ù–∞–∑–∞–¥', `${cart.at(-1).categoryId}`)]
        ]})
        // console.log(ctx.session.cart)
    }
    if (data === '-' && cart.length) {
        cart[cart.length-1].count-=1
        await ctx.editMessageReplyMarkup({inline_keyboard:[
            [Markup.button.callback('‚ûñ', '-'), Markup.button.callback(`${cart[cart.length-1].count}`, 'count'), Markup.button.callback('‚ûï', '+')],
            [Markup.button.callback(`üõí (${ctx.session.cart.reduce((acc, curr)=> {return acc+=curr.price[0]*curr.count}, 0)})`, 'cart')],
            [Markup.button.callback('–ù–∞–∑–∞–¥', `${cart.at(-1).categoryId}`)]
        ]})
    } 
    if (data === '-' && cart[cart.length-1].count==0) {
        
        await ctx.editMessageReplyMarkup({inline_keyboard:[
            [Markup.button.callback(`${cart[cart.length-1].count}`, 'count'), Markup.button.callback('‚ûï', '+')],
            [Markup.button.callback(`üõí (${ctx.session.cart.reduce((acc, curr)=> {return acc+=curr.price[0]*curr.count}, 0)})`, 'cart')],
            [Markup.button.callback('–ù–∞–∑–∞–¥', `${cart.at(-1).categoryId}`)]
        ]})
    }
    if (data === 'cancelOrder') { 
        await ctx.answerCbQuery('–í—ã –æ—á–∏—Å—Ç–∏–ª–∏ –∫–æ—Ä–∑–∏–Ω—É.')
        ctx.session.cart = []
        products.forEach(item => item.count = 0)
        await ctx.editMessageText('–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞...')
        await ctx.editMessageReplyMarkup({inline_keyboard:[
          [Markup.button.callback('üìù–ú–µ–Ω—é', 'menu')],
        ]})
        ctx.session.cart.length = 0
    products.forEach(product => product.count = 0)
    } 
    if (data == 'cart') 
    {   
        
        ctx.answerCbQuery()
        ctx.deleteMessage()
        if(cart.length === 0 || cart.reduce((acc, curr)=> {return acc+=curr.price[0]*curr.count}, 0)==0) {
            await ctx.replyWithHTML('<b>–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞...</b>', Markup.inlineKeyboard( 
                [
                    [Markup.button.callback(`üìù–ú–µ–Ω—é`, 'menu')],
                ]))
        } else {
            let sum = cart.reduce((acc, curr)=> {return acc+=curr.price[0]*curr.count}, 0)
            if (sum >=500 && sum <1000) {sum = sum/100*97}
            else if (sum >=1000) {sum = sum/100*95}
            let discount = 0
            if (sum >=500 && sum <1000) {discount = 3}
            else if (sum >=1000) {discount = 5}
            await ctx.replyWithHTML(`üõç<b>–í–∞—à –∑–∞–∫–∞–∑:</b> \n „Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è ${cart.filter(item => item.count>=1).map(item => '\n'+ "‚óΩ" + item.title +  ' - ['+item.count+'*'+item.price[0]+'|'+item.count*item.price[0]+']')} \n „Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è\n <b>üí≥ –û–±—â–∞—è —Å—É–º–º–∞: ‚ÇΩ${ctx.session.cart.reduce((acc, curr)=> {return acc+=curr.price[0]*curr.count}, 0)}</b>\n–°–∫–∏–¥–∫–∞: <b>${discount}%</b>\n<b><ins>–ò—Ç–æ–≥:</ins> ‚ÇΩ${Math.round(sum)}</b>`, Markup.inlineKeyboard([
            [Markup.button.callback(`‚úÖ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ`, 'submitOrder')],
            [Markup.button.callback(`‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑`, 'cancelOrder')],
            [Markup.button.callback(`üîô–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏`, 'menu')]
        ]))  }
    }
                                                                                                                                                  
    if (data === 'submitOrder') {
            await ctx.answerCbQuery()
            await ctx.scene.enter('orderScene')
    }
    else await ctx.answerCbQuery()

})
//________________________________CALLBACK QUERY________END________________


bot.hears('delete', (ctx) =>{
    let k = 0;
    for(let i = 0; i <= 100; i++ ){
        k =  ctx.message.message_id-i;
        ctx.deleteMessage(k)
    }
})



// bot.on("message", async (ctx) => {
    
//     const captionPhoto = 'my cap'
//     const captionEntitiesPhoto = ctx.message.caption_entities;
//     const fileIdPhoto = 'AgACAgIAAxkBAAIQXGPDm2WtW_hd53yyPOojK8YqCOF0AAIPxjEboMYgSp0wA3Q0mrVaAQADAgADeQADLQQ'

//     await ctx.telegram.sendPhoto(ctx.chat.id, fileIdPhoto, {
//         caption: captionPhoto,
//         reply_markup:{
//             inline_keyboard:[
//                 [{text:"Hii",callback_data:"Byy"}]
//             ]
//         }
//     });
// });



bot.launch();
// Enable graceful stop
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));


