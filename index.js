const { Telegraf, Markup, Composer, Scenes, session} = require('telegraf');
require('dotenv').config();
const bot = new Telegraf('5856492718:AAFYH9lDst1Jy1Itou4EINFXUwYTpUoBDUo');
const productList = require('./productList.js')
const products = productList.productList
const btns = require('./constants.js');
const GARNISH_MEAL_IDS = btns.GARNISH_MEAL_IDS
const STOPLIST = btns.STOPLIST
const CAFE_NUM = btns.CAFE_NUM
const CAFE_ADDRESS = btns.CAFE_ADDRESS

// const GARNISH_MEAL_IDS = products.filter(item => item.garnish).map(item => item.id)

//+++++++++++++++++++++
const orderScene = require('./orderScene');
const stage = new Scenes.Stage([orderScene])
bot.use(session());
bot.use(stage.middleware());
//+++++++++++++++++++++




//–•—ç–Ω–¥–ª–µ—Ä—ã –¥–ª—è –∫–∞–Ω–∞–ª–∞. –¢–æ, —á—Ç–æ –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ "–û–ø–ª–∞—á–µ–Ω" –∏–ª–∏ "–û—Ç–∫–ª–æ–Ω—ë–Ω"
bot.action('accepted', async (ctx) => {
    try {
        await ctx.answerCbQuery()
        await ctx.editMessageReplyMarkup({inline_keyboard:
        [
            [Markup.button.callback('‚úÖ–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç', 'orderAccepted')],
        ] 
        })
    } catch (error) {
        console.log(error.message);
    }
})
bot.action('rejected', async (ctx) => {
    try {
        await ctx.answerCbQuery()
        await ctx.editMessageReplyMarkup({inline_keyboard:
        [
        [Markup.button.callback('‚ùå–ó–∞–∫–∞–∑ –û—Ç–∫–ª–æ–Ω–µ–Ω', 'orderRejected')],
        ] 
        })
    } catch (error) {
        console.log(error.message);
    }
}) 


        

bot.on("photo", async (ctx) => {
    try {
        if (ctx.message.from.username == 'I_grok') {

        const captionPhoto = ctx.message.caption;
        const captionEntitiesPhoto = ctx.message.caption_entities;
        const chat_id = 859134174
        const fileIdPhoto = ctx.message.photo[ctx.message.photo.length-1].file_id;
        return ctx.replyWithHTML(`${fileIdPhoto}`);
        }
    } catch (error) {
        console.log(error.message);
    }
});
//price

//–¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –±–ª—é–¥–∞ —Å –≤—ã–±–æ—Ä–æ–º –≥–∞—Ä–Ω–∏—Ä–∞
bot.action(GARNISH_MEAL_IDS, async (ctx) => {
    try {
        await ctx.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ –≥–∞—Ä–Ω–∏—Ä')
        await ctx.editMessageReplyMarkup({inline_keyboard:[ 
             [Markup.button.callback('–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å —Ñ—Ä–∏', `${ctx.match}Free`)],
             [Markup.button.callback('–†–∏—Å', `${ctx.match}Rise`)],
             [Markup.button.callback('–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å –≤ –º—É–Ω–¥–∏—Ä–µ', `${ctx.match}Mundir`)],
             [Markup.button.callback('–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å–Ω–æ–µ –ø—é—Ä–µ', `${ctx.match}Pure`)],
             [Markup.button.callback('–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å –ø–æ-–¥–µ—Ä–µ–≤–µ–Ω—Å–∫–∏', `${ctx.match}Village`)],
             [Markup.button.callback('–ù–∞–∑–∞–¥', 'cknMeal')],
            ]})
    } catch (error) {
        console.log(error.message);
    }
})




//–º–µ–Ω—é, –∫–æ—Ç–æ—Ä–æ–µ –≤—Å–ø–ª—ã–≤—ë—Ç –¥–ª—è –Ω–∞–ø–∏—Ç–∫–æ–≤ (—Å–¥–µ–ª–∞–Ω–æ –º–∞–Ω—É–∞–ª—å–Ω–æ –¥–ª—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫)
bot.action('drinks', async (ctx) => {
    try {
        await ctx.answerCbQuery();
        await ctx.deleteMessage();
        await ctx.replyWithHTML('<b>_______–ù–ê–ü–ò–¢–ö–ò:_______</b>',Markup.inlineKeyboard(btns.drinks));
    } catch (error) {
        console.log(error.message);
    }
}) 


//–ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
bot.action(products.map(product => product.categoryId), async (ctx) => {
    try {
        await ctx.answerCbQuery()
        await ctx.deleteMessage();
        // –≤ —Å—Ç—Ä–æ–∫–µ –Ω–∏–∂–µ —è –ø—Ä–∏–≤–æ–∂—É –ø—Ä–æ–¥—É–∫—Ç—ã –≤ —É–¥–æ–±–Ω—É—é —Ñ–æ—Ä–º—É —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥ map, —á—Ç–æ–±—ã –∫–∞–∂–¥—ã–π –ø—Ä–æ–¥—É–∫—Ç –∏–º–µ–ª —Ñ–æ—Ä–º—É –º–∞—Å—Å–∏–≤–∞ –∏–∑ –¥–≤—É—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
        // –ø–µ—Ä–≤—ã–π - –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ + –µ–≥–æ —Ü–µ–Ω–∞, –∞ –≤—Ç–æ—Ä–æ–π - –∞–π–¥–∏ –ø—Ä–æ–¥—É–∫—Ç–∞. –î–∞–ª—å—à–µ —è –¥–æ–±–∞–≤–ª—è—é –≤ —ç—Ç–æ—Ç –º–∞—Å—Å–∏–≤ –∫–Ω–æ–ø–∫—É "–Ω–∞–∑–∞–¥" –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –º–µ–Ω—é
        const tappedCategoryProducts = products.filter(product =>product.categoryId == ctx.match).map(item => [item.title +` [${item.price}]`, item.id])
        tappedCategoryProducts.push(['üîô–Ω–∞–∑–∞–¥', 'menu'])
        ctx.sendMessage(`${products.find(item => ctx.match == item.categoryId).category}`, Markup.inlineKeyboard(tappedCategoryProducts.map(item=> [Markup.button.callback(item[0], item[1])])))
        //–≤ —Å—Ç—Ä–æ–∫–µ –≤—ã—à–µ —è –∏—â—É –≤ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞, –∫–æ—Ç–æ—Ä–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–ª–±—ç–∫—É –Ω–∞–∂–∞—Ç–æ–π –º–Ω–æ–π –∫–Ω–æ–ø–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —è –Ω–∞–∂–∞–ª –Ω–∞ ('–ë–∞–Ω–∞–Ω', 'banana'), –∑–Ω–∞—á–∏—Ç –±—É–¥—É –∏—Å–∫–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞, –∞–π–¥–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ == 'banana')
    } catch (error) {
        console.log(error.message);
    }
})







//MENU_________________________
bot.start((ctx) => {
    try {
        ctx.replyWithHTML(
btns.helloText, 
        Markup.keyboard(
            [
                ['üìù–ú–ï–ù–Æ'],['üõí–ö–û–†–ó–ò–ù–ê']
            ]
        ).resize())
    } catch (error) {
        console.log(error.message);
    }
})


bot.hears('üìù–ú–ï–ù–Æ', async (ctx) => { //–ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ üìù–ú–ï–ù–Æ - –æ—Ç–ø—Ä–∞–≤–ª—è—é –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ –º–∞–Ω—É–∞–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. –∫–æ–ª–±–µ–∫–∏ –∫–Ω–æ–ø–æ–∫ üìù–ú–ï–ù–Æ —Ä–∞–≤–Ω—ã categoryId –ø—Ä–æ–¥—É–∫—Ç–æ–≤.
    try {
        await ctx.deleteMessage()
        await ctx.reply('–ù–µ–æ –®–µ—Ñ', Markup.keyboard([
            ['üìù–ú–ï–ù–Æ'],['üõí–ö–û–†–ó–ò–ù–ê']
        ]).resize())
        await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', Markup.inlineKeyboard(btns.categoryBtns))
    } catch (error) {
        console.log(error.message);
    }
})
const date = new Date()
bot.hears('a', ctx => ctx.reply(`${date.getUTCHours()+3}`))
//enter
bot.hears('üõí–ö–û–†–ó–ò–ù–ê', async ctx => {
    try {
        ctx.session ??= { cart: [] };
        ctx.session.cart ??= [];
        const cart = [...new Set(ctx.session.cart)]
        if(cart.length === 0 || cart.reduce((acc, curr)=> {return acc+=curr.price*curr.count}, 0)==0) {
            await ctx.replyWithHTML('<b>–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞...</b>', Markup.inlineKeyboard( 
                [
                    [Markup.button.callback(`üìù–ú–µ–Ω—é`, 'menu')],
                ]))
        } else {
            let sum = cart.reduce((acc, curr)=> {return acc+=curr.price*curr.count}, 0)
            let discount = 0
            const date = new Date();
            if ((date.getUTCHours()+3) >= 20 && (date.getUTCHours()+3) < 24) {
                sum*= 0.85
                discount = 15
            } else if (sum >=500 && sum <1000) {
                sum = sum/100*97
                discount = 3
            } else if (sum >=1000) {
                sum = sum/100*95
                discount = 5
            }
            await ctx.replyWithHTML(`üõç<b>–í–∞—à –∑–∞–∫–∞–∑:</b> \n „Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è ${cart.filter(item => item.count>=1).map(item => '\n'+ "‚óΩ" + item.title +' - ['+item.count+'*'+item.price+'|'+item.count*item.price+']')} \n „Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è\n <b>üí≥ –û–±—â–∞—è —Å—É–º–º–∞: ‚ÇΩ${ctx.session.cart.reduce((acc, curr)=> {return acc+=curr.price*curr.count}, 0)}</b>\n–°–∫–∏–¥–∫–∞: <b>${discount}%</b>\n<b><ins>–ò—Ç–æ–≥:</ins> ‚ÇΩ${Math.round(sum)}</b>`, Markup.inlineKeyboard([
            [Markup.button.callback(`‚úÖ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ`, 'submitOrder')],
            [Markup.button.callback(`‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑`, 'cancelOrder')],
            [Markup.button.callback(`üîô–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏`, 'menu')]
        ]))  }
    } catch (error) {
        console.log(error.message);
    }
})
bot.action('menu', ctx => {
    try {
        ctx.answerCbQuery()
        ctx.deleteMessage()
        ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç', Markup.inlineKeyboard(btns.categoryBtns))
    } catch (error) {
        console.log(error.message);
    }
})
//_____________________MENU END








bot.hears('üöó–î–æ—Å—Ç–∞–≤–∫–∞', async (ctx) => {
    await ctx.scene.enter('delivertyScene')
})











//_________CALLBACK QUERY________________________
bot.on('callback_query', async (ctx) => {
    try {
        ctx.session ??= { cart: [] };
        ctx.session.cart ??= [];
        const cart = [...new Set(ctx.session.cart)]
        // console.log(ctx.session.cart)
        const data = ctx.update.callback_query.data
        // console.log(data)
        const tappedProduct = products.find(item => item.id == data)
            
        if(tappedProduct) {
            await ctx.answerCbQuery()
            ctx.session.cart.push(tappedProduct)                   
            // console.log(ctx.session.cart)
            await ctx.deleteMessage()
            await ctx.telegram.sendPhoto(ctx.chat.id, tappedProduct.photo_id || 'AgACAgIAAxkBAAItwWPeVi9Y4E5i0rwiQzXLLghmwJPzAAIWxzEbyjj4Sh5BQTr4yZqgAQADAgADeQADLgQ', 
                {
                    caption: 
`<b>${tappedProduct.title} - [‚ÇΩ ${tappedProduct.price}]</b> 
„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è
${tappedProduct.content ? '–°–æ—Å—Ç–∞–≤: ' + tappedProduct.content : ''}`,
                    reply_markup:{
                        inline_keyboard:[
                            [{text:"–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data:"+"}],
                            [{text:"–ù–∞–∑–∞–¥", callback_data:`${tappedProduct.categoryId}`}]
                        ]
                    }, parse_mode: 'HTML'
                });        
        }
        if (data === '+') {
            cart.at(-1).count+=1 || ctx.reply('ok')
            await ctx.editMessageReplyMarkup({inline_keyboard:[
                [Markup.button.callback('‚ûñ', '-'), Markup.button.callback(`${cart.at(-1).count}`, 'count'), Markup.button.callback('‚ûï', '+')],
                [Markup.button.callback(`üõí (${ctx.session.cart.reduce((acc, curr)=> {return acc+=curr.price*curr.count}, 0)})`, 'cart')],
                [Markup.button.callback('–ù–∞–∑–∞–¥', `${cart.at(-1).categoryId}`)]
            ]})
            // console.log(ctx.session.cart)
        }
        if (data === '-' && cart.length) {
            cart.at(-1).count-=1
            await ctx.editMessageReplyMarkup({inline_keyboard:[
                [Markup.button.callback('‚ûñ', '-'), Markup.button.callback(`${cart.at(-1).count}`, 'count'), Markup.button.callback('‚ûï', '+')],
                [Markup.button.callback(`üõí (${ctx.session.cart.reduce((acc, curr)=> {return acc+=curr.price*curr.count}, 0)})`, 'cart')],
                [Markup.button.callback('–ù–∞–∑–∞–¥', `${cart.at(-1).categoryId}`)]
            ]})
        } 
        if (data === '-' && cart.at(-1).count==0 && cart.length) {
                
            await ctx.editMessageReplyMarkup({inline_keyboard:[
                [Markup.button.callback(`${cart.at(-1).count}`, 'count'), Markup.button.callback('‚ûï', '+')],
                [Markup.button.callback(`üõí (${ctx.session.cart.reduce((acc, curr)=> {return acc+=curr.price*curr.count}, 0)})`, 'cart')],
                [Markup.button.callback('–ù–∞–∑–∞–¥', `${cart.at(-1).categoryId}`)]
            ]})
        } 
        if (data === 'cancelOrder') { 
            await ctx.answerCbQuery('–í—ã –æ—á–∏—Å—Ç–∏–ª–∏ –∫–æ—Ä–∑–∏–Ω—É.')
            ctx.session.cart = []
            products.forEach(item => item.count = null)
            await ctx.editMessageText('–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞...')
            await ctx.editMessageReplyMarkup({inline_keyboard:
                [
                    [{text:"üìù–ú–µ–Ω—é", callback_data:"menu"}],
                ]
            })
        } 
        if (data == 'cart') 
        {   
            ctx.answerCbQuery()
            ctx.deleteMessage()
            if(cart.length === 0 || cart.reduce((acc, curr)=> {return acc+=curr.price*curr.count}, 0)==0) {
                await ctx.replyWithHTML('<b>–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞...</b>', Markup.inlineKeyboard( 
                    [
                        [Markup.button.callback(`üìù–ú–µ–Ω—é`, 'menu')],
                    ]))
            } else {
                let sum = cart.reduce((acc, curr)=> {return acc+=curr.price*curr.count}, 0)
                let discount = 0
                const date = new Date();
                if ((date.getUTCHours()+3) >= 20 && (date.getUTCHours()+3) < 24) {
                    sum*= 0.85
                    discount = 15
                } else if (sum >=500 && sum <1000) {
                    sum = sum/100*97
                    discount = 3
                } else if (sum >=1000) {
                    sum = sum/100*95
                    discount = 5
                }
                await ctx.replyWithHTML(`
üõç<b>–í–∞—à –∑–∞–∫–∞–∑:</b> 
„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è ${cart.filter(item => item.count>=1).map(item => '\n'+ "‚óΩ" + item.title +  ' - ['+item.count+'*'+item.price+'| '+item.count*item.price+']')} 
„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è
<b>üí≥ –û–±—â–∞—è —Å—É–º–º–∞: ‚ÇΩ${ctx.session.cart.reduce((acc, curr)=> {return acc+=curr.price*curr.count}, 0)}</b>
–°–∫–∏–¥–∫–∞: <b>${discount}%</b>
<b><ins>–ò—Ç–æ–≥:</ins> ‚ÇΩ${Math.round(sum)}</b>
${sum>500?'\n<b>–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –≥–æ—Ä–æ–¥—É</b>':`\n<i>–î–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏ –∑–∞–∫–∞–∂–∏—Ç–µ —Ç–æ–≤–∞—Ä–æ–≤ –µ—â–µ –Ω–∞ ${500-sum}‚ÇΩ</i>`}
`, Markup.inlineKeyboard([
                    [Markup.button.callback(`‚úÖ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ`, 'submitOrder')],
                    [Markup.button.callback(`‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑`, 'cancelOrder')],
                    [Markup.button.callback(`üîô–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏`, 'menu')]
                ]))  
            }
        }                                                                                                                                                
        if (data === 'submitOrder' && ctx.session.cart.length>0) {
            await ctx.answerCbQuery()
            await ctx.replyWithHTML('–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏', Markup.keyboard([
                ['üöó–î–æ—Å—Ç–∞–≤–∫–∞', 'üôã‚Äç‚ôÇÔ∏è–°–∞–º–æ–≤—ã–≤–æ–∑'],
                ['üìù–ú–ï–ù–Æ']
            ]).resize())
        } else await ctx.answerCbQuery()
    } catch (error) {
        console.log(error.message);
    }
})
//________________________________CALLBACK QUERY_____END

bot.command('stoplist', async (ctx) => {
    await ctx.reply(STOPLIST)
})
bot.command('num', async (ctx) => {
    await ctx.replyWithHTML(`${CAFE_NUM}`)
})
bot.command('add', async (ctx) => {
    await ctx.replyWithHTML(`${CAFE_ADDRESS}`)
})


bot.launch();
// Enable graceful stop
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));
                
                

                // bot.on("message", async (ctx) => {
                    
                    //     const captionPhoto = 'my cap'
                    //     const captionEntitiesPhoto = ctx.message.caption_entities;
                    //     const fileIdPhoto = 'AgACAgIAAxkBAAIQXGPDm2WtW_hd53yyPOojK8YqCOF0AAIPxjEboMYgSp0wA3Q0mrVaAQADAgADeQADLQQ'
                    
                    //     await ctx.telegram.sendPhoto(ctx.chat.id, fileIdPhoto, {
                        //         caption: captionPhoto,
                        //         reply_markup:{
                            //             inline_keyboard:[
                                //                 [{text:"Hii",callback_data:"Byy"}]
                                //             ]
                                //         }
                                //     });
                                // });
                                
                                
                // bot.hears('delete', (ctx) =>{
                //     let k = 0;
                //     for(let i = 0; i <= 100; i++ ){
                //         k =  ctx.message.message_id-i;
                //         ctx.deleteMessage(k)
                 //     }
                // })